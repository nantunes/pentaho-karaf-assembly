<?xml version="1.0" encoding="UTF-8"?>
<featuresProcessing xmlns="http://karaf.apache.org/xmlns/features-processing/v1.0.0" xmlns:f="http://karaf.apache.org/xmlns/features/v1.6.0">

    <!-- A list of blacklisted features XML repository URIs - they can't be added later -->
    <blacklistedRepositories>
        <!-- [BACKLOG-30946] Unneeded references to older cxf repositories (brought in by apache-camel features files)
             are starting up multiple cxf-specs features, causing classload issues with JAX-RS -->
        <repository>mvn:org.apache.cxf.karaf/apache-cxf/[3.1,3.3)/xml/features</repository>
    </blacklistedRepositories>

    <!-- A list of blacklisted feature identifiers that can't be installed in Karaf and are not part of the distribution -->
    <blacklistedFeatures></blacklistedFeatures>

    <!-- A list of blacklisted bundle URIs that are not installed even if they are part of some features -->
    <blacklistedBundles></blacklistedBundles>

    <!-- A list of repository URIs, feature identifiers and bundle URIs to override "dependency" flag -->
    <overrideBundleDependency></overrideBundleDependency>

    <!-- A list of bundle URI replacements that allows changing external feature definitions -->
    <bundleReplacements>
        <!-- [PPP-4430] CVE-2019-12086 Use of Vulnerable Component: jackson-databind-2.9.8.jar -->
        <!-- Replace all jackson bundles installed by activemq-karaf (first three) and apache-cxf (all) -->
        <bundle
                originalUri="mvn:com.fasterxml.jackson.core/jackson-core/[2.9.0,${fasterxml-jackson.version})"
                replacement="mvn:com.fasterxml.jackson.core/jackson-core/${fasterxml-jackson.version}" mode="maven" />
        <bundle
                originalUri="mvn:com.fasterxml.jackson.core/jackson-databind/[2.9.0,${fasterxml-jackson.version})"
                replacement="mvn:com.fasterxml.jackson.core/jackson-databind/${fasterxml-jackson.version}" mode="maven" />
        <bundle
                originalUri="mvn:com.fasterxml.jackson.core/jackson-annotations/[2.9.0,${fasterxml-jackson.version})"
                replacement="mvn:com.fasterxml.jackson.core/jackson-annotations/${fasterxml-jackson.version}" mode="maven" />
        <bundle
                originalUri="mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/[2.9.0,${fasterxml-jackson.version})"
                replacement="mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/${fasterxml-jackson.version}" mode="maven" />
        <bundle
                originalUri="mvn:com.fasterxml.jackson.module/jackson-module-jaxb-annotations/[2.9.0,${fasterxml-jackson.version})"
                replacement="mvn:com.fasterxml.jackson.module/jackson-module-jaxb-annotations/${fasterxml-jackson.version}" mode="maven" />
        <bundle
                originalUri="mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-base/[2.9.0,${fasterxml-jackson.version})"
                replacement="mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-base/${fasterxml-jackson.version}" mode="maven" />
        <bundle
                originalUri="mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-json-provider/[2.9.0,${fasterxml-jackson.version})"
                replacement="mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-json-provider/${fasterxml-jackson.version}" mode="maven" />

        <!-- Replacing the org.ops4j.pax.logging/pax-logging-api bundle by our own wrapped version of it,
             preventing the export of packages from the logging APIs the Pentaho products use and inject from
             the main classloader (org.apache.commons.logging, org.apache.log4j and org.slf4j). -->
        <bundle
                originalUri="mvn:org.ops4j.pax.logging/pax-logging-api/${pax-logging.version}"
                replacement="mvn:org.hitachivantara/pax-logging-api-wrap/${project.version}" mode="maven" />
    </bundleReplacements>

    <!-- A list of feature replacements that allows changing external feature definitions -->
    <featureReplacements>
        <replacement>
            <!-- [PPP-4430] CVE-2019-12086 Use of Vulnerable Component: jackson-databind-2.9.8.jar -->
            <!-- Redefine the cxf-jackson feature because of the wraps of jackson-jaxrs-base and jackson-jaxrs-json-provider -->
            <feature name="cxf-jackson" version="${cxf.version}">
                <!-- Required by jackson-dataformat-yaml -->
                <f:bundle start-level="10" dependency="true">mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxrs-api-2.1/${servicemix.jaxrs-api.version}</f:bundle>
                <f:bundle start-level="10" dependency="true">mvn:javax.annotation/javax.annotation-api/1.3.1</f:bundle>
                <f:bundle start-level="35">mvn:org.yaml/snakeyaml/1.23</f:bundle>
                <f:bundle start-level="35">mvn:com.fasterxml.jackson.core/jackson-core/${fasterxml-jackson.version}</f:bundle>
                <f:bundle start-level="35">mvn:com.fasterxml.jackson.core/jackson-annotations/${fasterxml-jackson.version}</f:bundle>
                <f:bundle start-level="35">mvn:com.fasterxml.jackson.core/jackson-databind/${fasterxml-jackson.version}</f:bundle>
                <f:bundle start-level="35">mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/${fasterxml-jackson.version}</f:bundle>
                <f:bundle start-level="35">mvn:com.fasterxml.jackson.module/jackson-module-jaxb-annotations/${fasterxml-jackson.version}</f:bundle>
                <!-- <f:bundle start-level="35">mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-base/${fasterxml-jackson.version}</f:bundle> -->
                <!-- <f:bundle start-level="35">mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-json-provider/${fasterxml-jackson.version}</f:bundle> -->
                <f:feature prerequisite="true">wrap</f:feature>
                <f:bundle>wrap:mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-base/${fasterxml-jackson.version}$overwrite=merge&amp;Import-Package=javax.ws.rs*;version="[2.0,3)",com.fasterxml.jackson*;version="[2.8,3)"</f:bundle>
                <f:bundle>wrap:mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-json-provider/${fasterxml-jackson.version}$overwrite=merge&amp;Import-Package=javax.ws.rs*;version="[2.0,3)",com.fasterxml.jackson.module.jaxb;resolution:=optional;version="[2.8,3)",com.fasterxml.jackson*;version="[2.8,3)"</f:bundle>
            </feature>
        </replacement>

        <replacement>
            <feature name="camel-guava-eventbus" version="${camel.version}" start-level="50">
                <f:details>
                    This feature override wraps camel-guava-eventbus artifact with the reason to override version of com.google.common.eventbus package being imported (force it to be 17.x).
                    This is needed due to inability of using guava's EventBus in blueprint container starting from guava-18.0.

                    Considering there are no breaking changes in 18.0 and 19.0 releases of Guava eventbus,
                    that could affect camel-guava-eventbus, we need to downgrade guava to be able to use it in Blueprint context.

                    EventBus instance can't be injected from a reference, since the Blueprint container must proxy it.
                    The container generates a subclass at runtime to be able to proxy a class.
                    This has the limitation of not being able to work on final classes or final methods.
                    And starting from guava-18.0 version, the EventBus class does have final methods.
                </f:details>
                <f:feature prerequisite="true" version="${camel.version}">camel-core</f:feature>
                <f:bundle dependency="true">mvn:com.google.guava/guava/${guava.monitoring.version}</f:bundle>
                <f:bundle>wrap:mvn:org.apache.camel/camel-guava-eventbus/${camel.version}$overwrite=merge&amp;Import-Package=com.google.common.eventbus;version="[${guava.monitoring.version},${guava.monitoring.version}]",org.apache.camel;version="[${camel.version},3)",org.apache.camel.impl;version="[${camel.version},3)",org.apache.camel.spi;version="[${camel.version},3)",org.apache.camel.util;version="[${camel.version},3)",org.osgi.framework;version="[1.5,2)",org.osgi.framework.wiring;version="[1.0,2)",org.slf4j;version="[1.6,2)"</f:bundle>
            </feature>
        </replacement>

        <replacement>
            <!-- This is an alternative to the bundle replacement above... neither do work unfortunately -->
            <feature name="framework" version="${karaf.version}">
                <!-- persistent wiring extension -->
                <f:bundle start-level="1">mvn:org.apache.karaf.features/org.apache.karaf.features.extension/${karaf.version}</f:bundle>
                <!-- mvn: and wrap: url handlers -->
                <f:bundle start-level="5">mvn:org.ops4j.pax.url/pax-url-aether/${pax-url-aether.version}</f:bundle>

                <!-- logging -->
                <!-- Replacing the org.ops4j.pax.logging/pax-logging-api bundle by our own wrapped version of it,
                     preventing the export of packages from the logging APIs the Pentaho products use and inject from
                     the main classloader (org.apache.commons.logging, org.apache.log4j and org.slf4j). -->
                <!--bundle start-level="8">mvn:org.ops4j.pax.logging/pax-logging-api/${pax-logging.version}</bundle>
                <bundle start-level="8">mvn:org.ops4j.pax.logging/pax-logging-log4j2/${pax-logging.version}</bundle-->
                <f:bundle start-level="8">mvn:org.hitachivantara/pax-logging-api-wrap/${project.version}</f:bundle>

                <f:bundle start-level="8">mvn:org.fusesource.jansi/jansi/${jansi.version}</f:bundle>
                <!-- config admin -->
                <f:bundle start-level="9">mvn:org.apache.felix/org.apache.felix.coordinator/${felix.coordinator.version}</f:bundle>
                <f:bundle start-level="10">mvn:org.apache.felix/org.apache.felix.configadmin/${felix.configadmin.version}</f:bundle>
                <!-- file install -->
                <f:bundle start-level="11">mvn:org.apache.felix/org.apache.felix.fileinstall/${felix.fileinstall.version}</f:bundle>
                <!-- features service -->
                <f:bundle start-level="15">mvn:org.apache.karaf.features/org.apache.karaf.features.core/${karaf.version}</f:bundle>
                <f:bundle dependency="true" start-level="30">mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxb-api-2.2/${servicemix-spec.version}</f:bundle>
                <f:bundle dependency="true" start-level="30">mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.activation-api-1.1/${servicemix-spec.version}</f:bundle>
            </feature>
        </replacement>
    </featureReplacements>

</featuresProcessing>